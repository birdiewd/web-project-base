#!/bin/bash

if [ $# -eq 1 ]
then
	project=$1;
	makeDir=1;

	if [ -d $project ]
	then
		echo "";
		echo "The $project directory already exists.";
		echo -n "Do you want to delete it? [N/y] ";
		read -n 1 delDir;
		echo "";

		if [ -z $delDir ]
		then
			delDir='n';
		fi

		if [ $delDir = 'y' ]
		then
			rm -Rf $project;
		else
			makeDir=0;
		fi
	fi

	if [ $makeDir -eq 1 ]
	then
		echo "";
		echo "Creating web-app '$project'";

		mkdir $project;
		cd $project;

		echo "";
		echo -n "Do you wish to install nvm? [N/y] ";
		read -n 1 nvm;
		echo "";

		if [ -z $nvm ]
		then
			nvm='n';
		fi

		if [ $nvm = 'y' ]
		then
			echo 'Installing nvm';
			echo "";

			touch ~/.bash_profile
			curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash
			export NVM_DIR="$HOME/.nvm"
			[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

			echo "";
			echo -n "Do you want to install node 7.x? [N/y] ";
			read -n 1 node;
			echo "";

			if [ -z $node ]
			then
				node='n';
			fi

			if [ $node = 'y' ]
			then
				echo "Installing node 7";
				echo "";
				nvm install 7;
				nvm use 7;
			fi
		fi

		echo "";

		# --- npm package uses ---
		# react: view
		# mobx: store/data
		# webpack: kick off
		# gulp: actioner
		# axios: ajax
		# co: generator iterator
		# babel: transpiler
		# sass: css compiler

#### file creation : start ####

cat <<EOT >> .babelrc;
{
	"presets": [
		"react",
		"es2015"
	],
	"plugins": [
		"transform-decorators-legacy",
		"transform-class-properties"
	]
}
EOT
cat <<EOT >> .eslintrc;
{
	"plugins": [
		"react"
	],
	"extends": [
		"eslint:recommended",
		"plugin:react/recommended"
	],
	"rules": {
		"no-set-state": "off"
	}
}
EOT
cat <<EOT >> .gitignore;
.DS_Store
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Typescript v1 declaration files
typings/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
EOT
cat <<EOT >> gulpfile.js;
var gulp = require('gulp');
var exec = require('child_process').exec;

// Generate minified bundle
gulp.task('webpack', ['copy'], function(cb) {
	process.env.NODE_ENV = 'production';

	exec('webpack --optimize-minimize', function (err, stdout, stderr) {
		if (err) { cb(err) }

		console.log(stdout);
		console.log(stderr);
	});
});

gulp.task('copy', function () {
	// html
	gulp.src('./src/index.html')
		.pipe(gulp.dest('./dist/'));

	// assets
	gulp.src('./src/assets/**/*')
		.pipe(gulp.dest('./dist/assets/'));
});
EOT
cat <<EOT >> package.json;
{
  "dependencies": {
    "mobx": "^3.1.5",
    "mobx-react": "^4.1.2",
    "npm-check-updates": "^2.10.3",
    "react": "^15.4.2",
    "react-dom": "^15.4.2",
    "react-router": "^4.0.0",
    "react-router-dom": "^4.0.0"
  },
  "devDependencies": {
    "axios": "^0.15.3",
    "babel-core": "^6.23.1",
    "babel-loader": "^6.4.0",
    "babel-plugin-transform-class-properties": "^6.23.0",
    "babel-plugin-transform-decorators-legacy": "^1.3.4",
    "babel-preset-es2015": "^6.22.0",
    "babel-preset-react": "^6.23.0",
    "co": "^4.6.0",
    "css-loader": "^0.27.3",
    "gulp": "^3.9.1",
    "html-webpack-plugin": "^2.28.0",
    "node-sass": "^4.5.0",
    "normalize.css": "^5.0.0",
    "react-addons-test-utils": "^15.4.2",
    "sass-loader": "^6.0.3",
    "style-loader": "^0.14.1",
    "webpack": "^2.2.1",
    "webpack-dev-server": "^2.4.1"
  },
  "scripts": {
    "serve": "webpack-dev-server --content-base src --hot --inline --port 3000",
    "build": "rm -rf ./dist && gulp webpack",
    "prune": "npm prune && npm cache clean && npm install",
    "check-up": "npm-check-updates",
    "get-up": "npm-check-updates -u && npm install"
  },
  "version": "0.1.0",
  "main": "src/_$project.js",
  "author": "",
  "description": "",
  "name": "$project",
  "private": true
}
EOT
cat <<EOT >> package.json.orig;
{
  "dependencies": {
    "mobx": "^3.1.5",
    "mobx-react": "^4.1.2",
    "npm-check-updates": "^2.10.3",
    "react": "^15.4.2",
    "react-dom": "^15.4.2",
    "react-router": "^4.0.0",
    "react-router-dom": "^4.0.0"
  },
  "devDependencies": {
    "axios": "^0.15.3",
    "babel-core": "^6.23.1",
    "babel-loader": "^6.4.0",
    "babel-plugin-transform-class-properties": "^6.23.0",
    "babel-plugin-transform-decorators-legacy": "^1.3.4",
    "babel-preset-es2015": "^6.22.0",
    "babel-preset-react": "^6.23.0",
    "co": "^4.6.0",
    "css-loader": "^0.27.3",
    "gulp": "^3.9.1",
    "html-webpack-plugin": "^2.28.0",
    "node-sass": "^4.5.0",
    "normalize.css": "^5.0.0",
    "react-addons-test-utils": "^15.4.2",
    "sass-loader": "^6.0.3",
    "style-loader": "^0.14.1",
    "webpack": "^2.2.1",
    "webpack-dev-server": "^2.4.1"
  },
  "scripts": {
    "serve": "webpack-dev-server --content-base src --hot --inline --port 3000",
    "build": "rm -rf ./dist && gulp webpack",
    "prune": "npm prune && npm cache clean && npm install",
    "check-up": "npm-check-updates",
    "get-up": "npm-check-updates -u && npm install"
  },
  "version": "0.1.0",
  "main": "src/_$project.js",
  "author": "",
  "description": "",
  "name": "$project",
  "private": true
}
EOT
mkdir src;
cd src;
mkdir components;
cd components;
cat <<EOT >> Todo.js;
import React, {Component} from 'react'
import { inject, observer } from 'mobx-react'

@observer
export default class Todo extends Component {
	constructor() {
		super()

		this.handleCompleteToggle = this.handleCompleteToggle.bind(this)
	}

	handleCompleteToggle(e) {
		this.props.todo.complete = !this.props.todo.complete
	}

	render() {
		return (
			<li key={this.props.todo.id}>
				<input
					type="checkbox"
					value={this.props.todo.complete}
					checked={this.props.todo.complete}
					onChange={this.handleCompleteToggle}
				/>&nbsp;
				{this.props.todo.value}
			</li>
		);
	}
}
EOT
cat <<EOT >> Todos.js;
import React, { Component } from 'react'
import { inject, observer } from 'mobx-react'

import Todo from './Todo'

@inject('store')
@observer
export default class Todos extends Component {
	constructor() {
		super()

		this.handleCreateKeypress = this.handleCreateKeypress.bind(this)
		this.handleFilterChange = this.handleFilterChange.bind(this)
	}

	handleCreateKeypress(event) {
		if (event.which === 13) { // enter key
			this.props.store.createTodo(event.target.value) // add todo
			event.target.value = '' // clear todo text
		}
	}

	handleFilterChange(event) {
		this.props.store.filter = event.target.value
	}

	render() {
		const { completedTodos, filter, filteredTodos, todos } = this.props.store

		const todoList = filteredTodos.map(todo => (<Todo key={todo.id} todo={todo} />))

		const todoneList = completedTodos.map(todo => (<Todo key={todo.id} todo={todo} />))

		const todoString = "Todo List"
		const todoneString = "Todone List"

		return (
			<div>
				<input placeholder="filter lists" className="filter" value={filter} onChange={this.handleFilterChange} />

				<h1 className={"character-type-" + todoString.length}>{todoString}</h1>
				<input placeholder="creat new todo" className="create" onKeyPress={this.handleCreateKeypress} />
				{todoList.length ? (<ul>{todoList}</ul>) : ''}

				<h1 className={"character-type-" + todoneString.length}>{todoneString}</h1>
				{todoneList.length ? (<ul>{todoneList}</ul>) : ''}
			</div>
		);
	}
}
EOT
cd ..;
cat <<EOT >> index.template.html;
<!doctype html>
<html>
	<head>
		<title>$project</title>
		<meta charset="utf-8">
		<meta name="description" content="">
		<meta name="viewport" content="width=device-width">
	</head>
	<body>
		<!--[if lt IE 10]>
			<p class="browsehappy">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>
		<![endif]-->
		<div id="root"></div>
	</body>
</html>
EOT
mkdir routes;
cd routes;
cat <<EOT >> _$project.js;
import React from 'react'
import ReactDOM from 'react-dom'
import { BrowserRouter as Router, Route, browserHistory } from 'react-router-dom'
import { Provider } from 'mobx-react'

import Todos from '../components/Todos'
import todoStore from '../stores/TodoStore'

const app = document.getElementById('root');

ReactDOM.render(
	<Provider store={todoStore}>
		<Router history={browserHistory}>
			<Route path="/" component={Todos}/>
		</Router>
	 </Provider>,
	app
)
EOT
cd ..;
mkdir stores;
cd stores;
cat <<EOT >> TodoStore.js;
import React, {Component} from 'react'
import { computed, observable } from 'mobx'

class Todo {
	@observable id
	@observable value
	@observable complete

	constructor(value) {
		this.value = value
		this.id = Date.now()
		this.complete = false
	}
}

export class TodoStore {
	@observable todos = []
	@observable filter = ''

	@computed get filteredTodos() {
		let matchedFilters = new RegExp(this.filter, 'i')

		return this.todos.filter(todo => {
			let passesFilter = !this.filter || matchedFilters.test(todo.value)
			let notDone = !todo.complete

			return passesFilter && notDone
		})
	}

	@computed get completedTodos() {
		let matchedFilters = new RegExp(this.filter, 'i')

		return this.todos.filter(todo => {
			let passesFilter = !this.filter || matchedFilters.test(todo.value)
			let isDone = todo.complete

			return passesFilter && isDone
		})
	}

	createTodo(todo) {
		this.todos.push(new Todo(todo))
	}
}

export default new TodoStore
EOT
cd ..;
mkdir styles;
cd styles;
cat <<EOT >> _$project.scss;
@import "~normalize.css/normalize.css";

// makes it a bit easier to see behind the error
#webpack-dev-server-client-overlay{
	opacity: .9 !important;
}

// globals

*, *:before, *:after {
	box-sizing: border-box;
}

body{
	font-size: 16px;
	background: #eee;
}

.flex-row{
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	align-items: flex-start;
	justify-content: space-around;

	width: 100%;

	&:not(.logo):not(.footer) > *{
		flex-grow: 1;

		margin-left: 1em;
		margin-right: 1em;
		padding: 0 1em 1em;
	}
}
.flex-col{
	display: flex;
	flex-direction: column;
	flex-wrap: wrap;
	justify-content: center;
}

#root > * {
	@extend .flex-col;
	justify-content: flex-start;
	align-items: flex-start;
	padding: 1em;
	min-height: 100vh;
}

h1, h2, h3{
	margin-bottom: .3em;
	margin-top: .3em;
}
h1{
	font-size: 2.5em;
}
h2{
	text-align: center;
	font-size: 2em;
}
h3{
	font-size: 1.5em;
}
EOT
cd ..;
cd ..;
cat <<EOT >> webpack.config.js;
var debug = process.env.NODE_ENV !== 'production',
	outPath = debug ? 'src' : 'dist',
	webpack = require('webpack'),
	path = require('path'),
	HtmlWebpackPlugin = require('html-webpack-plugin');

var defaultPlugins = [
	new HtmlWebpackPlugin({
		template: 'index.template.html',
		inject: 'body',
		filename: 'index.html'
	})
];

module.exports = {
	name: 'js',
	context: path.join(__dirname, "src"),
	devtool: (debug ? "inline-sourcemap" : false),
	devServer: (debug ? {
		overlay: true,
		historyApiFallback: {
			index: 'index.html'
		}
	} : {}),
	entry: {
		main: path.join(__dirname, './src/routes/_$project.js'),
		style: path.join(__dirname, './src/styles/_$project.scss')
	},
	module: {
		rules: [
			{
				test: /\.(css|scss|sass)$/,
				use: [
					{ loader: 'style-loader' },
					{ loader: 'css-loader' },
					{ loader: 'sass-loader' },
				],
			},
			{
				test: /\.js$/,
				use:  [
					{ loader: 'babel-loader' }
				],
				exclude: /(node_modules|bower_components)/,
			}
		]
	},
	output: {
		path: path.join(__dirname, outPath),
		filename: '$project.min.[name].js'
	},
	plugins: (debug ? [
		...defaultPlugins,
		new webpack.optimize.UglifyJsPlugin({
			mangle: false,
			output: {
				comments: true
			},
			compress: {
				warnings: true
			}
		})
	] : [
		...defaultPlugins,
		new webpack.DefinePlugin({
			'process.env': {
				NODE_ENV: JSON.stringify('production')
			}
		}),
		new webpack.optimize.UglifyJsPlugin({
			beautify: false,
			mangle: {
				screw_ie8: true,
				keep_fnames: false
			},
			compress: {
				screw_ie8: true
			},
			comments: false
		})
	])
};
EOT
cd ..;

#### file creation : end ####

		cd $project;

		npm prune;
		npm cache clean;
		npm install;

		cp package.json package.json.orig;
	fi
else
	echo "";
	echo "ERROR: Please provide a project name.";
	echo "";
fi